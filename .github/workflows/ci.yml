name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: pyapp

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install dependencies
        run: poetry install --no-interaction
        
      - name: Run tests
        run: poetry run pytest -s

  build-and-push:
    needs: test
    environment: main
    runs-on: ubuntu-latest
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  update-argocd:
    needs: build-and-push
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ArgoCD repository
        uses: actions/checkout@v4
        with:
          repository: vietvite/infra-cicd-test
          token: ${{ secrets.ARGOCD_GITHUB_USER }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Update values.yaml
        working-directory: argocd/ms-apps/environments/production/pyapp
        env:
          ECR_REGISTRY: ${{ needs.build-and-push.outputs.ecr_registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Create values.yaml if it doesn't exist
          touch values.yaml
          # Update image repository and tag using yq
          yq -i eval '.image.repository = env(ECR_REGISTRY) + "/" + env(ECR_REPOSITORY)' values.yaml
          yq -i eval '.image.tag = env(IMAGE_TAG)' values.yaml

      - name: Commit and push changes
        working-directory: argocd/ms-apps/environments/production/pyapp
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add values.yaml
          git commit -m "Update image tag to ${GITHUB_SHA}"
          git push origin main
